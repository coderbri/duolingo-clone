
27 Apr 2024 - 00:35
- initialized repo with README.md, notes.md, and this version_log.md
- notes.md will contain my insights from what I learned creating this project
- this version_log.txt will be a space to make a summary of what i accomplished in this coding session and what bugs I resolved as I encounter them

27 Apr 2024 - 02:30
- Installed Next.js with required dependencies (Node v21.4.0).
- Created project structure with `create-next-app`.
- Initialized shadcn/ui for components.
- Customized font to "Nunito" in `layout.tsx`.
- Cleared default page content in `page.tsx`.
- Added button component using `shadcn-ui`.
- Imported and used button component in `page.tsx`.

2 May 2024 - 02:50
- Established routes within Next.js application for button component library: /buttons.
- Created `buttons` route with `page.tsx` file.
- Exported default component from `buttons/page.tsx` to prevent "Unhandled Runtime Error".
- Created button component library with baseline configurations and recreated variants.

3 May 2024 - 02:00
- Created Marketing Skeleton:
  - Focused on preparing the marketing or landing page.
  - Established route groups for organizational purposes with (marketing)/ folder.
  - Created reusable layout components for header and footer.

3 May 2024 - 16:15
- Set up authentication using Clerk:
  - Created a Clerk application named "Lingo".
  - Added ClerkProvider in `layout.tsx`.
  - Integrated Clerk components for authentication in the header:
    - Used `ClerkLoading` component with a `Loader` to display a loading indicator while authentication state is checked.
    - Utilized components such as `SignInButton`, `SignedIn`, `SignedOut`, and `UserButton` to manage authentication states and provide UI elements for signing in, signing up, and displaying user information in the header.

8 May 2024 - 01:55
- Adjusted spacing between buttons on the hero page.

8 May 2024 - 23:45
- Implemented footer component with language navigation options

10 May 2024 - 02:30
- Implemented the main layout for the learn platform, comprising layout.tsx and learn/page.tsx files.
- Developed the responsive sidebar component to ensure accessibility on both desktop and mobile layouts.
- Enabled the sidebar to remain fixed on the left side of the screen and implemented functionality for mobile sidebar triggering.
- Built the mobile header and sidebar components to optimize viewing on smaller screens.
- Refactored sidebar items as reusable components and added dynamic behavior for active navigation highlighting.
- Integrated a logout button using Clerk imports for user authentication.

11 May 2024 - 23:30
- Updated Main Layout (`layout.tsx`) in the `main/` directory to optimize for larger screens.
- Added `StickyWrapper`, `FeedWrapper`, `Header`, and `UserProgress` components to enhance the learn page's layout and user experience.

13 May 2024 - 03:40
- Created and connected a new database using Neon, a cloud-based database service.
- Set up Drizzle ORM to interact with the Neon database in your React project.
- Configured the database directory and schema files for defining database tables and fields.
- Configured Drizzle to use the specified schema and database credentials.
- Used the `npm run db:push` command to push the schema changes to the Neon database.
- Verified the changes by checking the Neon dashboard for the newly added table.
- Ran the `npm run db:studio` command to access the Drizzle Studio and manage the database visually.
- Added an entry to the database using Drizzle Studio, confirming successful database interaction.

14 May 2024 - __:__
- Began working on Courses Page:
- Created additional courses in the database schema.
- Established a connection to the Drizzle Studio for database management.
- Developed a query to fetch courses from the database asynchronously.
- Implemented components to render course lists and individual course cards.
- Enabled dynamic rendering of course data on the Courses Page.

17 May 2024 - 23:59
- Created `userProgress` table in schema to track user progress in courses.
- Established relationships between `courses` and `userProgress` tables.
- Implemented `getUserProgress` query to retrieve user progress data.
- Updated `courses/page.tsx` to include user progress data in the `List` component.
- Updated `learn/page.tsx` to redirect users to the courses page if no active course is found.
- Added a Loader component to improve user experience during redirections.
- Created server action `upsertUserProgress` to handle user progress updates and insertions.
- Enhanced course selection logic in `courses/list.tsx` with `useTransition` for better state management.

18 May 2024 - 02:30
- Added Sonner package to handle flashing error messages to users.
- Imported Toaster into app root's layout and Sonner's toast function in the List component to display error messages to users.
- Updated the startTransition() function in the List component to catch errors and display error messages using Sonner's `toast.error()` function.

23 May 2024 - 19:30
- Created `seed.ts` script for seeding and resetting the database.
- Configured script execution using TSX package.
- Implemented course insertion within the seed script.
- Provided troubleshooting steps and optimal package recommendations.
- Detailed database reestablishment process with Neon integration.

31 May 2024 - 17:35
- Implemented dynamic rendering of the course title in the header on the learn page.
- Updated the `<UserProgress />` component to use dynamic properties from `userProgress`.
- Applied Drizzle types to the `activeCourse` prop in the `UserProgress` component.
- Provided troubleshooting steps to resolve errors related to dynamic rendering.
- Ensured the learn page header dynamically displays the selected course's title.

1 June 2024 - 22:45
- Added units table and defined its relationship with courses.
- Created lessons table and established its association with units.
- Defined challenges table and integrated enum for challenge types.
- Implemented challenge options table and its relationships.
- Added challenge progress tracking table and updated relevant relationships.
- Ensured all relationships are correctly set up for complex queries.

2 June 2024 - 20:25
- Implemented seed script functionality to create units, lessons, challenges, and challenge options in the database.
- Setup the seed script to delete newly created tables for a clean reset.
- Created units via the seed script, specifying details like title, description, and order.
- Generated lessons for the created units, populating them with titles and orders.
- Established challenges and challenge options, defining question prompts and correct/incorrect options.
- Prepared backend query getUnits to fetch units along with associated lessons and challenges.
- Developed frontend rendering logic to display fetched units and lessons on the Learn Page.

7 June 2024 - 02:00
- Updated `getUnits` query to filter `challengeProgress` by `userId`, ensuring progress retrieval for a specific user
- Rendered units and lessons dynamically on the Learn Page, replacing JSON code
- Built and styled `<Unit />` and `<UnitBanner />` components
- Created and styled `<LessonButton />` component with progress visualization
- Seeded additional lessons for testing various statuses

20 June 2024 - 16:00
- Implemented `getCourseProgress` method: Retrieves user progress, units, lessons, and challenges, directing users to their current lesson.
- Added `getLessons` method: Fetches lesson data based on an optional ID, ensuring data is normalized with a completion status for challenges.
- Created `getLessonPercentage` method: Calculates the percentage of lesson completion based on user progress and completed challenges.
- Updated Learn Page: Included data fetching for `courseProgress` and `lessonPercentage` and added checks for course progress existence.
- Enhanced `<Unit />` component: Updated to include `activeLesson` and `activeLessonPercentage` properties, ensuring lessons are rendered with accurate data.
- Fixed future lesson completion issue: Adjusted `getUnits` query to ensure future lessons are locked and not marked as completed.
- Debugging: Ensured accurate rendering and locking of lessons with no challenges in future lessons.

21 June 2024 - 22:10
- Updated the name from plural to singular for the `getLessons` query to `getLesson`.
- Created a new `/lesson` route directory with a `page.tsx` file to fetch lesson and user progress data.
- Implemented an asynchronous function in the Lesson Page to ensure data validity before rendering or redirecting.
- Established layout settings in `lesson/layout.tsx` to render lesson content responsively.
- Developed a `<Quiz />` component to manage lesson data, initializing state for hearts and progress percentage.
- Built the `Header` component within `<Quiz />`, displaying interactive elements like hearts, a progress bar, and an exit button.
- Customized the progress bar appearance using the shadcn UI package and appropriate styling.

22 June 2024 - 01:00
- Installed Necessary Packages: Added `zustand` for state management and `shadcn-ui` for dialog components.
- SVG Asset Addition: Uploaded `mascot_sad.svg` to the `public/` folder for use in the modal.
- State Management with Zustand: Created a Zustand store for managing the modal's open/close state.
- Exit Modal Component: Developed the `ExitModal` component with all necessary imports and state definitions.
- Client-Side Checks: Ensured the component operates on the client side using `useEffect`.
- Integrated with Layout: Added the `ExitModal` component to the main layout file to ensure it is available across the application.
- Header Integration: Linked the Exit Modal to the "X" button in the lesson header to trigger the modal upon click.

27 June 2024 - 19:05
- Implemented dynamic challenge question retrieval and display using `useState`.
- Created and styled `QuestionBubble` component for "SELECT" type questions.
- Developed `Challenge` component to render options based on challenge type.
- Verified challenge options rendering as JSON strings and transitioned to `Card` component.
- Created and styled `Card` component for displaying challenge options with dynamic rendering.
- Applied conditional styling to `Card` component for selected, correct, and incorrect states.
- Verified proper rendering and data display through visual checks and debugging.

3 July 2024 - 02:50
- Integrated 11ElevenLabs AI to generate multilingual audio files.
- Configured the `Card` component to play audio on click using `react-use`.
- Implemented audio playback and onClick handling in the `Card` component.
- Added keyboard navigation support for selecting challenge options.
- Implemented visual indicators and state management in the `Quiz` component for selected options.

2 August 2024 - 23:00
- Created Footer component to confirm user's choice and validate answers
- Added props: disabled, status, onCheck, lessonId for Footer component
- Implemented dynamic styling for Footer based on challenge status
- Integrated useKey and useMedia hooks for functionality and responsiveness
- Rendered Button component with dynamic messages and styles
- Tested Footer component with various statuses (i.e., correct, wrong, none, completed) to ensure proper functionality and UI
```

06 Spetember 2024 - 00:00
- Implemented `onNext` and `onContinue` methods for challenge actions
- Provided feedback for correct and incorrect answers in challenges
- Added heart reduction logic for incorrect answers
- Created server-side actions to track challenge progress and handle errors
- Implemented UI state handling for pending transitions
- Added functionality to mark challenges as complete after correct answers
- Updated database seed script to include multiple challenges for testing

____