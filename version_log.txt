
27 Apr 2024 - 00:35
- initialized repo with README.md, notes.md, and this version_log.md
- notes.md will contain my insights from what I learned creating this project
- this version_log.txt will be a space to make a summary of what i accomplished in this coding session and what bugs I resolved as I encounter them

27 Apr 2024 - 02:30
- Installed Next.js with required dependencies (Node v21.4.0).
- Created project structure with `create-next-app`.
- Initialized shadcn/ui for components.
- Customized font to "Nunito" in `layout.tsx`.
- Cleared default page content in `page.tsx`.
- Added button component using `shadcn-ui`.
- Imported and used button component in `page.tsx`.

2 May 2024 - 02:50
- Established routes within Next.js application for button component library: /buttons.
- Created `buttons` route with `page.tsx` file.
- Exported default component from `buttons/page.tsx` to prevent "Unhandled Runtime Error".
- Created button component library with baseline configurations and recreated variants.

3 May 2024 - 02:00
- Created Marketing Skeleton:
  - Focused on preparing the marketing or landing page.
  - Established route groups for organizational purposes with (marketing)/ folder.
  - Created reusable layout components for header and footer.

3 May 2024 - 16:15
- Set up authentication using Clerk:
  - Created a Clerk application named "Lingo".
  - Added ClerkProvider in `layout.tsx`.
  - Integrated Clerk components for authentication in the header:
    - Used `ClerkLoading` component with a `Loader` to display a loading indicator while authentication state is checked.
    - Utilized components such as `SignInButton`, `SignedIn`, `SignedOut`, and `UserButton` to manage authentication states and provide UI elements for signing in, signing up, and displaying user information in the header.

8 May 2024 - 01:55
- Adjusted spacing between buttons on the hero page.

8 May 2024 - 23:45
- Implemented footer component with language navigation options

10 May 2024 - 02:30
- Implemented the main layout for the learn platform, comprising layout.tsx and learn/page.tsx files.
- Developed the responsive sidebar component to ensure accessibility on both desktop and mobile layouts.
- Enabled the sidebar to remain fixed on the left side of the screen and implemented functionality for mobile sidebar triggering.
- Built the mobile header and sidebar components to optimize viewing on smaller screens.
- Refactored sidebar items as reusable components and added dynamic behavior for active navigation highlighting.
- Integrated a logout button using Clerk imports for user authentication.

11 May 2024 - 23:30
- Updated Main Layout (`layout.tsx`) in the `main/` directory to optimize for larger screens.
- Added `StickyWrapper`, `FeedWrapper`, `Header`, and `UserProgress` components to enhance the learn page's layout and user experience.

13 May 2024 - 03:40
- Created and connected a new database using Neon, a cloud-based database service.
- Set up Drizzle ORM to interact with the Neon database in your React project.
- Configured the database directory and schema files for defining database tables and fields.
- Configured Drizzle to use the specified schema and database credentials.
- Used the `npm run db:push` command to push the schema changes to the Neon database.
- Verified the changes by checking the Neon dashboard for the newly added table.
- Ran the `npm run db:studio` command to access the Drizzle Studio and manage the database visually.
- Added an entry to the database using Drizzle Studio, confirming successful database interaction.

14 May 2024 - __:__
- Began working on Courses Page:
- Created additional courses in the database schema.
- Established a connection to the Drizzle Studio for database management.
- Developed a query to fetch courses from the database asynchronously.
- Implemented components to render course lists and individual course cards.
- Enabled dynamic rendering of course data on the Courses Page.

17 May 2024 - 23:59
- Created `userProgress` table in schema to track user progress in courses.
- Established relationships between `courses` and `userProgress` tables.
- Implemented `getUserProgress` query to retrieve user progress data.
- Updated `courses/page.tsx` to include user progress data in the `List` component.
- Updated `learn/page.tsx` to redirect users to the courses page if no active course is found.
- Added a Loader component to improve user experience during redirections.
- Created server action `upsertUserProgress` to handle user progress updates and insertions.
- Enhanced course selection logic in `courses/list.tsx` with `useTransition` for better state management.

18 May 2024 - 02:30
- Added Sonner package to handle flashing error messages to users.
- Imported Toaster into app root's layout and Sonner's toast function in the List component to display error messages to users.
- Updated the startTransition() function in the List component to catch errors and display error messages using Sonner's `toast.error()` function.

23 May 2024 - 19:30
- Created `seed.ts` script for seeding and resetting the database.
- Configured script execution using TSX package.
- Implemented course insertion within the seed script.
- Provided troubleshooting steps and optimal package recommendations.
- Detailed database reestablishment process with Neon integration.

31 May 2024 - 17:35
- Implemented dynamic rendering of the course title in the header on the learn page.
- Updated the `<UserProgress />` component to use dynamic properties from `userProgress`.
- Applied Drizzle types to the `activeCourse` prop in the `UserProgress` component.
- Provided troubleshooting steps to resolve errors related to dynamic rendering.
- Ensured the learn page header dynamically displays the selected course's title.

1 June 2024 - 22:45
- Added units table and defined its relationship with courses.
- Created lessons table and established its association with units.
- Defined challenges table and integrated enum for challenge types.
- Implemented challenge options table and its relationships.
- Added challenge progress tracking table and updated relevant relationships.
- Ensured all relationships are correctly set up for complex queries.

2 June 2024 - 20:25
- Implemented seed script functionality to create units, lessons, challenges, and challenge options in the database.
- Setup the seed script to delete newly created tables for a clean reset.
- Created units via the seed script, specifying details like title, description, and order.
- Generated lessons for the created units, populating them with titles and orders.
- Established challenges and challenge options, defining question prompts and correct/incorrect options.
- Prepared backend query getUnits to fetch units along with associated lessons and challenges.
- Developed frontend rendering logic to display fetched units and lessons on the Learn Page.

7 June 2024 - 02:00
- Updated `getUnits` query to filter `challengeProgress` by `userId`, ensuring progress retrieval for a specific user
- Rendered units and lessons dynamically on the Learn Page, replacing JSON code
- Built and styled `<Unit />` and `<UnitBanner />` components
- Created and styled `<LessonButton />` component with progress visualization
- Seeded additional lessons for testing various statuses
____